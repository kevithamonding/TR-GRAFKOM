#include<windows.h>
#include <stdlib.h>
#include <GL/freeglut.h>

void init(void);
void tampil(void);
void keyboard(unsigned char, int, int);
void mouse(int button, int state, int x, int y);
void ukuran(int, int);
void mouseMotion(int x, int y);

int is_depth;
float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;

//db : depan-belakang
//kk : kiri-kanan
//ab : atas-bawah

void db(float xkiri, float xkanan, float ybawah, float yatas, float z) {
    glBegin(GL_QUADS);
    glVertex3f(xkiri, ybawah, z);
    glVertex3f(xkiri, yatas, z);
    glVertex3f(xkanan, yatas, z);
    glVertex3f(xkanan, ybawah, z);
    glEnd();
}

void kk(float xsisi, float ybawah, float yatas, float zdepan, float zbelakang) {
    glBegin(GL_QUADS);
    glVertex3f(xsisi, ybawah, zdepan);
    glVertex3f(xsisi, yatas, zdepan);
    glVertex3f(xsisi, yatas, zbelakang);
    glVertex3f(xsisi, ybawah, zbelakang);
    glEnd();
}

void ab(float xkiri, float xkanan, float y, float zdepan, float zbelakang) {
    glBegin(GL_QUADS);
    glVertex3f(xkiri, y, zdepan);
    glVertex3f(xkanan, y, zdepan);
    glVertex3f(xkanan, y, zbelakang);
    glVertex3f(xkiri, y, zbelakang);
    glEnd();
}

void bangunan_kiri() {
    glColor3f(1.0, 1.0, 1.0);
    //depan
    db(-70.0, 10.0, -30.0, 30.0, -20.0);
    //belakang
    db(-70.0, 10.0, -30.0, 30.0, -110.0);

    glColor3f(0.0, 1.0, 0.0);
    //kiri
    kk(-70.0, -30.0, 30.0, -20.0, -110.0);
    //kanan
    kk(10.0, -30.0, 30.0, -20.0, -110.0);

    glColor3f(1.0, 0.0, 0.0);
    //atas
    ab(-65.0, 10.0, 30.0, -25.0, -105.0);
    //bawah
    ab(-70.0, 10.0, -30.0, -20.0, -110.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(250, 80);
    glutCreateWindow("University of Bristol");
    init();
    glutDisplayFunc(tampil);
    glutKeyboardFunc(keyboard);
    glutReshapeFunc(ukuran);
    glutMainLoop();
    return 0;
}

void init(void)
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glEnable(GL_DEPTH_TEST);
    is_depth = 1;
    glMatrixMode(GL_MODELVIEW);
    //glOrtho(-100.0, 100.0, -100.0, 100.0, -0.0, 5.0);
    
    glPointSize(9.0);
    glLineWidth(6.0f);
}

void tampil(void)
{
    if (is_depth)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    else
        glClear(GL_COLOR_BUFFER_BIT);

    bangunan_kiri();

    glPushMatrix();
    glPopMatrix();

    glutSwapBuffers();

}

void idle() {
    if (!mouseDown)
    {
        xrot += 0.5f;
        yrot += 0.6f;
    }
    glutPostRedisplay();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        mouseDown = true;
        xdiff = x - yrot;
        ydiff = -y + xrot;
    }
    else
        mouseDown = false;
}

void mouseMotion(int x, int y) {
    if (mouseDown) {
        xrot = x - xdiff;
        yrot = y + ydiff;

        glutPostRedisplay();
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'w':
    case 'W':
        glTranslatef(0.0, 0.0, 3.0);
        break;
    case 'd':
    case 'D':
        glTranslatef(3.0, 0.0, 0.0);
        break;
    case 's':
    case 'S':
        glTranslatef(0.0, 0.0, -3.0);
        break;
    case 'a':
    case 'A':
        glTranslatef(-3.0, 0.0, 0.0);
        break;
    case '7':
        glTranslatef(0.0, 3.0, 0.0);
        break;
    case '9':
        glTranslatef(0.0, -3.0, 0.0);
        break;
    case '2':
        glRotatef(2.0, 1.0, 0.0, 0.0);
        break;
    case '8':
        glRotatef(-2.0, 1.0, 0.0, 0.0);
        break;
    case '6':
        glRotatef(2.0, 0.0, 1.0, 0.0);
        break;
    case '4':
        glRotatef(-2.0, 0.0, 1.0, 0.0);
        break;
    case '1':
        glRotatef(2.0, 0.0, 0.0, 1.0);
        break;
    case '3':
        glRotatef(-2.0, 0.0, 0.0, 1.0);
        break;
    case '5':
        if (is_depth)
        {
            is_depth = 0;
            glDisable(GL_DEPTH_TEST);
        }
        else
        {
            is_depth = 1;
            glEnable(GL_DEPTH_TEST);
        }
    }
    tampil();
}

void ukuran(int lebar, int tinggi)
{
    if (tinggi == 0) tinggi = 1;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(50.0, lebar / tinggi, 5.0, 500.0);
    glViewport(0, 0, 800, 600);
    glTranslatef(0.0, -5.0, -150.0);
    glMatrixMode(GL_MODELVIEW);
}
